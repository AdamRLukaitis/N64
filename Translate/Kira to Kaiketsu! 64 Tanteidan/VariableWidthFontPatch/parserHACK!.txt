80053C38 needs to know the return value, so derive from each char on the table.
@80060324	0x60F24	encoding table for 0x21 - 0x7E
0x0	1	nibbles:
	F0	advance
	0F	leftshift
0x1	1	(signed) y offset

Final xpos and ypos normally determined without spacing:
xpos + #chars * 0xE
ypos + #lines * 0xF

*E = ((x<<3)-x)<<1	[or (x<<4)-x-x]
*F = (x<<4)-x

~_~

Ignore 0x7F.
Use tables at 800E1230 (SP+20) and 800E126C (SP+18) directly
Make a 1-byte table of "display w/ following"
'([	27285B00
Make a 1-byte table of "display w/ previous"
!),./?]{|}	21292C2E2F3F5D7B 7C7D00	{, |, } recoded to !, !!, !?

if < 0x7F, ASCII except when:
	a member of 801B70B4: special char table
	or 2121, 212F, 213F

~_~

preceed with a #chars->width calc
8FA20010	LW	V0,0010 (SP)
000218C0	SLL	V1,V0,0x3
00621823	SUBU	V1,V1,V0
00031840	SLL	V1,V1,0x1
AFA30010	SW	V1,0010 (SP)

800476B8	0x482B8	parse strings; V0=(xpos, ypos)
	accepts: A0=p->string, A1=xpos, A2=ypos, A3=max chars per row(?), SP+10=chars to display
	00073842	SRL	A3,A3,0x1	;original values were in physical width; this converts to #chars
@ alt
	000710C0	SLL	V0,A3,0x3
	00473823	SUBU	A3,V0,A3	;(chars*16) - (chars*2), or equiv. to chars*14
27BDFF88	ADDIU	SP,SP,FF88
AFBF0014	SW	RA,0014 (SP)
AFA40078	SW	A0,0078 (SP)
AFA5007C	SW	A1,007C (SP)
AFA60080	SW	A2,0080 (SP)
AFA70084	SW	A3,0084 (SP)
AFA00070	SW	R0,0070 (SP)	;70: True if new ASCII mode, 72: row, 73:line
AFA00074	SW	R0,0074 (SP)	;74: cur physical width, 76: total char count
A3A00063	SB	R0,0063 (SP)
8FB90078	LW	T9,0078 (SP)
3C18802F	LUI	T8,802F
AFB9006C	SW	T9,006C (SP)	;SP+6C = A0 f/caller: p->string
2718B1C8	ADDIU	T8,T8,B1C8
87AF008A	LH	T7,008A (SP)	;char.total
AFB80068	SW	T8,0068 (SP)	;SP+68 = 802EB1C8: buffer
05E10003	BGEZ	T7,80047784
AFB80064	SW	T8,0064 (SP)	;SP+64 = 802EB1C8: buffer
@ 8004777C
240F7FFF	ADDIU	T7,R0,7FFF
A7AF008A	SH	T7,008A (SP)	;if negative, show the whole string until NULL
@ 80047784
19E000B9	BLEZ	T7,80047AF0	;return if no chars to display
00000000	NOP
@ 8004779C
8FAB006C	LW	T3,006C (SP)	;pos
91690000	LBU	T1,0000 (T3)	;T1 = str[pos]
112000B5	BEQ	T1,R0,80047AF0	;break if NULL
916A0001	LBU	T2,0001 (T3)	;T3 = str[pos+1]	if wchar, contains lowerr half of value
00096200	SLL	T4,T1,0x8
018AC825	OR	T9,T4,T2	;T9 = value as a HW to speed up testing for wchars
@ 800477AC:	if ASCII madness, flip the flag, advance, don't increase count, and iterate
2401007F	ADDIU	AT,R0,007F
14290007	BNE	AT,T1,800477BC
24080001	ADDIU	T0,R0,0001
93AE0070	LBU	T6,0070 (SP)
00001025	OR	V0,R0,R0	;control code: no width!
39CF0001	XORI	T7,T6,0001
1000007C	BEQ	R0,R0,80047A20
A3AF0070	SB	T7,0070 (SP)	;flip the flag
00000000	NOP
@ 800477BC:	test for '\n'
2401000A	ADDIU	AT,R0,000A	;"\n"
11210006	BEQ	T1,AT,8004781C	;skip if newline
@ 80047804:	test for "\\n"
240C005C	ADDIU	T4,R0,005C	;"\"
152C000D	BNE	T1,T4,8004785C
2401006E	ADDIU	AT,R0,006E	;"n"
1541000B	BNE	T2,AT,8004785C	;skip if not newline
00000000	NOP
24080002	ADDIU	T0,R0,0002
@ 8004781C:	newlines push the row to max width; one fewer char remaining
87AF008A	LH	T7,008A (SP)
87B90086	LH	T9,0086 (SP)	;max width
25EEFFFF	ADDIU	T6,T7,FFFF
	A3B90072	SB	T9,0072 (SP)	;row = A3 f/caller
@ alt
	A7B90074	SH	T9,0074 (SP)	;row = A3 f/caller
A7AE008A	SH	T6,008A (SP)	;char.total -= 1
@ 80047824:	advance T0 chars and iterate
8FB8006C	LW	T8,006C (SP)
01184021	ADDU	T0,T0,T8
10000079	BEQ	R0,R0,80047A5C
AFA8006C	SW	T0,006C (SP)	;pos+=1
@ 8004785C:	T0 = 1 or 2 depending on char width; also inc. displayed width	Note! TAB not implemented!
2D21007F	SLTIU	AT,T1,007F	;if < 0x7F, try the ASCII tests.
2402000E	ADDIU	V0,R0,000E
5020001E	BEQL	AT,R0,80047868
24080002	ADDIU	T0,R0,0002
@ ascii
240D0021	ADDIU	T5,R0,0021
152D0009	BNE	T1,T5,specials
3C0C801B	LUI	T4,801B
2403002F	ADDIU	V1,R0,002F
514D0018	BEQL	T2,T5,80047868	;2121
24080002	ADDIU	T0,R0,0002
240E003F	ADDIU	T6,R0,003F
51430015	BEQL	T2,V1,80047868	;212F
24080002	ADDIU	T0,R0,0002
514E0013	BEQL	T2,T6,80047868	;213F
24080002	ADDIU	T0,R0,0002
@ specials
958D70B4	LHU	T5,70B4 (T4)
51B90010	BEQL	T5,T9,80047868
24080002	ADDIU	T0,R0,0002
15A0FFFC	BNE	T5,R0,specials
258C0002	ADDIU	T4,T4,0002
@ halfwidth-vs-VWF
2D210021	SLTIU	AT,T1,0021
24030009	ADDIU	V1,R0,0009	;tab
93AD0070	LBU	T5,0070 (SP)
50690009	BEQL	V1,T1,80047868	;dumb tabs are set to four spaces
2402001C	ADDIU	V0,R0,001C
11A00007	BEQ	T5,R0,80047868	;if not in extended-ASCII mode or a non-special one, use halfwidth of 7
24020007	ADDIU	V0,R0,0007
14200005	BNE	AT,R0,80047868
3C0C8006	LUI	T4,8006
00097840	SLL	T7,T1,0x1
018F6821	ADDU	T5,T4,T7
95B802E2	LHU	T8,02E2 (T5)
00181302	SRL	V0,T8,0xC	;variable width advance from table
@ 80047868:	if within one char of row's end, test if extending to keep continuity.  wchar tests first, then char.
	83AF0072	LB	T7,0072 (SP)	;row
	87AD0086	LH	T5,0086 (SP)	;max width
	01AF7023	SUBU	T6,T5,T7
	2DC10003	SLTIU	AT,T6,0003
@alternate
	87AF0074	LH	T7,0074 (SP)	;physical width
	87AD0086	LH	T5,0086 (SP)	;where max width is in pixels
	01AF7023	SUBU	T6,T5,T7
	2DC1000F	SLTIU	AT,T6,000F
10200043	BEQ	AT,R0,80047A20	;correct if max width == row+2 (position after assumed widechar)
00000000	NOP
A3A00063	SB	R0,0063 (SP)	;SP+63 = 0: no special group
3C0D800E	LUI	T5,800E
@ 80047884:	test against each char at SP+20 until NULL
010BC021	ADDU	T8,T0,T3
930E0000	LBU	T6,0000 (T8)
930F0001	LBU	T7,0001 (T8)
000EC200	SLL	T8,T6,0x8
030FC025	OR	T8,T8,T7
@ 8004788C:	test against each char at SP+20 until NULL
95AC1230	LHU	T4,1230 (T5)
1180000B	BEQ	T4,R0,80047920
25AD0002	ADDIU	T5,T5,0002
@ 800478A8:	test if next char in '。、ーぁぃぅぇぉゃゅょっァィゥェォャュョッ」）！？!!!?!/' (displayed with previous)
1598FFFC	BNE	T4,T8,8004788C
00000000	NOP
87AE0086	LH	T6,0086 (SP)
87AD008A	LH	T5,008A (SP)
240C0001	ADDIU	T4,R0,0001	;org. 1
25B9FFFF	ADDIU	T9,T5,FFFF
	A3AE0072	SB	T6,0072 (SP)	;row = A3 f/caller
@ alt
	A7AE0074	SH	T6,0074 (SP)	;row = A3 f/caller
A3AC0063	SB	T4,0063 (SP)	;SP+63 = 1: displayed with previous char
1000002C	BEQ	R0,R0,800479CC
A7B9008A	SH	T9,008A (SP)	;char.total -= 1
@ 80047920
3C0D800E	LUI	T5,800E
@ 80047930:	test for each char at SP+18 until NULL
95AC126C	LHU	T4,126C (T5)
1180000B	BEQ	T4,R0,preceedingASCII
25AD0002	ADDIU	T5,T5,0002
@ 80047954:	test if current char in '「（' (displayed with following)
1599FFFC	BNE	T4,T9,80047930
00000000	NOP
87AD008A	LH	T5,008A (SP)
87AE0086	LH	T6,0086 (SP)
240C0002	ADDIU	T4,R0,0002
25AFFFFF	ADDIU	T7,T5,FFFF
	A3AE0072	SB	T6,0072 (SP)	;row = A3 f/caller
@ alt
	A7AE0074	SH	T6,0074 (SP)	;row = A3 f/caller
A3AC0063	SB	T4,0063 (SP)	;SP+63 = 2: displayed with following char
1000001E	BEQ	R0,R0,800479CC
A7AF008A	SH	T7,008A (SP)	;char.total -= 1
@ preceedingASCII
3C0D8004	LUI	T5,8004
@ 80047960:	test for each char until NULL
91AC7B84	LBU	T4,7B84 (T5)
1180000B	BEQ	T4,R0,followingASCII
25AD0001	ADDIU	T5,T5,0001
@ 8004796C:	test if current char in '' (displayed with following)
1589FFFC	BNE	T4,T1,80047960
00000000	NOP
87AD008A	LH	T5,008A (SP)
87AE0086	LH	T6,0086 (SP)
240C0006	ADDIU	T4,R0,0006
25AFFFFF	ADDIU	T7,T5,FFFF
	A3AE0072	SB	T6,0072 (SP)	;row = A3 f/caller
@ alt
	A7AE0074	SH	T6,0074 (SP)	;row = A3 f/caller
A3AC0063	SB	T4,0063 (SP)	;SP+63 = 6: ascii displayed with following char
10000010	BEQ	R0,R0,800479CC
A7AF008A	SH	T7,008A (SP)	;char.total -= 1
@ followingASCII
010BC021	ADDU	T8,T0,T3
3C0D8004	LUI	T5,8004
930E0000	LBU	T6,0000 (T8)
@ 80047970:	test for each char until NULL
91AC7B78	LBU	T4,7B78 (T5)
1180000A	BEQ	T4,R0,800479CC
25AD0001	ADDIU	T5,T5,0001
@ 8004797C:	test if next char in '!),./?]{|}' (displayed with following)
158EFFFC	BNE	T4,T6,80047970
00000000	NOP
87AD008A	LH	T5,008A (SP)
87AE0086	LH	T6,0086 (SP)
240C0005	ADDIU	T4,R0,0005
25AFFFFF	ADDIU	T7,T5,FFFF
	A3AE0072	SB	T6,0072 (SP)	;row = A3 f/caller
@ alt
	A7AE0074	SH	T6,0074 (SP)	;row = A3 f/caller
A3AC0063	SB	T4,0063 (SP)	;SP+63 = 5: ascii displayed with preceeding char
A7AF008A	SH	T7,008A (SP)	;char.total -= 1
@ 800479CC:	advance wchar
83AC0063	LB	T4,0063 (SP)
15800010	BNEZ	T4,80047A5C	;skip if a combined char
00000000	NOP
@ 80047A20:	copy and advance T0 char(s)
8FAD0068	LW	T5,0068 (SP)	;p->buffer
2D010002	SLTIU	AT,T0,0002
A1A90000	SB	T1,0000 (T5)	;buffer.append(str[pos])
50200001	BEQL	AT,R0,+1	;completely unnecessary.  You could just copy these and overwrite.
A1AA0001	SB	T2,0001 (T5)	;buffer.append(str[pos])
01685821	ADDU	T3,T3,T0
01A86821	ADDU	T5,T5,T0
87AF0074	LH	T7,0074 (SP)
83AE0072	LB	T6,0072 (SP)
AFAD0068	SW	T5,0068 (SP)	;buffer.append(str[pos])
AFAB006C	SW	T3,006C (SP)	;pos+=charwidth
25CD0001	ADDIU	T5,T6,0001
01E2C021	ADDU	T8,T7,V0
A3AD0072	SB	T5,0072 (SP)	;row+=1; only one char eaten regardless (statistics only)
A7B80074	SH	T8,0074 (SP)	;increase the real width
@ 80047A5C
	83AD0072	LB	T5,0072 (SP)
@ alternate
	87AD0074	LH	T5,0074 (SP)
87A80086	LH	T0,0086 (SP)	;maxwidth
01A8082A	SLT	AT,T5,T0
14200014	BNEZ	AT,80047AD0	;if at max width, force the string out.
8FB80068	LW	T8,0068 (SP)
A3000000	SB	R0,0000 (T8)	;append NULL terminator to buffer
83A90073	LB	T1,0073 (SP)	;#lines
87AC0082	LH	T4,0082 (SP)	;ypos
00095100	SLL	T2,T1,0x4
87A4007E	LH	A0,007E (SP)	;xpos
8FA60064	LW	A2,0064 (SP)	;@SP+64 = strbuf
01495023	SUBU	T2,T2,T1
252E0001	ADDIU	T6,T1,0001
018A2821	ADDU	A1,T4,T2	;A1= ypos + lines * 0xF
0C017C7F	JAL	8005F1FC	;format and encode string A2, displaying at (A0, A1)
A3AE0073	SB	T6,0073 (SP)	;line+=1
2401007F	ADDIU	AT,R0,007F
8FAD0064	LW	T5,0064 (SP)
83AE0070	LB	T6,0070 (SP)	;True if 7F still in effect, acting as offset
A1A10000	SB	AT,0000 (T5)	;if you don't need it, should just get overwritten ;*)
A3A00072	SB	R0,0072 (SP)	;row = 0
01AE6821	ADDU	T5,T5,T6
A7A00074	SH	R0,0074 (SP)	;real width = 0
AFAD0068	SW	T5,0068 (SP)	;SP+68 = strbuf
@ 80047AD0
87A80076	LH	T0,0076 (SP)
87A9008A	LH	T1,008A (SP)	;char.total
25180001	ADDIU	T8,T0,0001
00187C00	SLL	T7,T8,0x10
000F5C03	SRA	T3,T7,0x10
0169082A	SLT	AT,T3,T1
1420FF49	BNEZ	AT,8004779C	;loop until total chars consumed
A7B80076	SH	T8,0076 (SP)	;total char count += 1
@ 80047AF0:	flush all remaining output
8FAC0068	LW	T4,0068 (SP)
A1800000	SB	R0,0000 (T4)	;buffer.append(NULL)
25990001	ADDIU	T9,T4,0001
AFB90068	SW	T9,0068 (SP)	;buffer+=1
83AD0073	LB	T5,0073 (SP)
87AE0082	LH	T6,0082 (SP)
000D4100	SLL	T0,T5,0x4
87A4007E	LH	A0,007E (SP)	;xpos
8FA60064	LW	A2,0064 (SP)	;@SP+64 = p->string
010D4023	SUBU	T0,T0,T5
0C017C7F	JAL	8005F1FC	;format and encode string A2, displaying at (A0, A1)
01C82821	ADDU	A1,T6,T0	;ypos + lines * 0xF
@ 80047B2C:	return value is fixed-width (xpos, ypos) tuple of HWs
87AF0074	LH	T7,0074 (SP)	;T7 = @SP+72: char count in row
87B8007E	LH	T8,007E (SP)	;T8 = A1 f/caller: xpos
27A2005C	ADDIU	V0,SP,005C	;return (xpos, ypos)
030F4821	ADDU	T1,T8,T7
A4490000	SH	T1,0000 (V0)	;SP[5C:5E] = xpos + char * 0xE: final xpos
83B90073	LB	T9,0073 (SP)	;T9 = @SP+73: lines
87AA0082	LH	T2,0082 (SP)	;T2 = A2 f/caller: ypos
00196900	SLL	T5,T9,0x4
01B96823	SUBU	T5,T5,T9
014D7021	ADDU	T6,T2,T5
A44E0002	SH	T6,0002 (V0)	;SP[5E:60] = ypos + lines * 0xF: final ypos
@ 80047B78:	return
8FBF0014	LW	RA,0014 (SP)
27BD0078	ADDIU	SP,SP,0078
03E00008	JR	RA
00000000	NOP

000710C0 00473823 27BDFF88 AFBF0014 AFA40078 AFA5007C AFA60080 AFA70084 AFA00070 AFA00074 A3A00063 8FB90078 3C18802F AFB9006C 2718B1C8 87AF008A AFB80068 05E10003 AFB80064 240F7FFF A7AF008A 19E000B9 00000000 8FAB006C 91690000 112000B5 916A0001 00096200 018AC825 2401007F 14290007 24080001 93AE0070 00001025 39CF0001 1000007C A3AF0070 00000000 2401000A 11210006 240C005C 152C000D 2401006E 1541000B 00000000 24080002 87AF008A 87B90086 25EEFFFF A7B90074 A7AE008A 8FB8006C 01184021 10000079 AFA8006C 2D21007F 2402000E 5020001E 24080002 240D0021 152D0009 3C0C801B 2403002F 514D0018 24080002 240E003F 51430015 24080002 514E0013 24080002 958D70B4 51B90010 24080002 15A0FFFC 258C0002 2D210021 24030009 93AD0070 50690009 2402001C 11A00007 24020007 14200005 3C0C8006 00097840 018F6821 95B802E2 00181302 87AF0074 87AD0086 01AF7023 2DC1000F 10200043 00000000 A3A00063 3C0D800E 010BC021 930E0000 930F0001 000EC200 030FC025 95AC1230 1180000B 25AD0002 1598FFFC 00000000 87AE0086 87AD008A 240C0001 25B9FFFF A7AE0074 A3AC0063 1000002C A7B9008A 3C0D800E 95AC126C 1180000B 25AD0002 1599FFFC 00000000 87AD008A 87AE0086 240C0002 25AFFFFF A7AE0074 A3AC0063 1000001E A7AF008A 3C0D8004 91AC7B84 1180000B 25AD0001 1589FFFC 00000000 87AD008A 87AE0086 240C0006 25AFFFFF A7AE0074 A3AC0063 10000010 A7AF008A 010BC021 3C0D8004 930E0000 91AC7B78 1180000A 25AD0001 158EFFFC 00000000 87AD008A 87AE0086 240C0005 25AFFFFF A7AE0074 A3AC0063 A7AF008A 83AC0063 15800010 00000000 8FAD0068 2D010002 A1A90000 50200001 A1AA0001 01685821 01A86821 87AF0074 83AE0072 AFAD0068 AFAB006C 25CD0001 01E2C021 A3AD0072 A7B80074 87AD0074 87A80086 01A8082A 14200014 8FB80068 A3000000 83A90073 87AC0082 00095100 87A4007E 8FA60064 01495023 252E0001 018A2821 0C017C7F A3AE0073 2401007F 8FAD0064 83AE0070 A1A10000 A3A00072 01AE6821 A7A00074 AFAD0068 87A80076 87A9008A 25180001 00187C00 000F5C03 0169082A 1420FF49 A7B80076 8FAC0068 A1800000 25990001 AFB90068 83AD0073 87AE0082 000D4100 87A4007E 8FA60064 010D4023 0C017C7F 01C82821 87AF0074 87B8007E 27A2005C 030F4821 A4490000 83B90073 87AA0082 00196900 01B96823 014D7021 A44E0002 8FBF0014 27BD0078 03E00008 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 21292C2E 2F3F5D7B 7C7D0000 27285B00

80047B78	0x48778
21292C2E2F3F5D7B 7C7D00 00 27285B00

Second parser at 800C9F28-800CA494! (0xCAB28 - 0xCB094)  Used during gameplay.

Uses encoded packets:
0x0	1	0xFF: indicates valid packet, else quits
0x1	2	xpos
0x3	2	ypos
0x5	1	[SP+AF]: xspacing(?)
0x6	1	[SP+AE]: yspacing(?)
0x7	4	rgba
0xB	3ea.	encoded string
	0x0	1	0xFF; break if 0
	0x1	2	char code; contains flags in upper byte
		8000	1-byte char
		4000	whitespace
		2000	ASCII

There's more than enough room, so spacings table can be a little bulky.
Only encodes 0x21 - 0x7E.  Offset backpedals so +0x42 is first entry in table.
0x0	1	nibbles:
	F000	advance
	0F00	leftshift
0x1	1	(signed) y offset

8005F72C	0x6032C	generate DL for encoded string
3C0E8010	LUI	T6,8010
91CE609D	LBU	T6,609D (T6)
27BDFF40	ADDIU	SP,SP,FF40
11C000C5	BEQ	T6,R0,8005FA4C	;return
AFBF00A8	SW	RA,00A8 (SP)
@ 8005F73C	0x6033C
3C018019	LUI	AT,8019
3C048006	LUI	A0,8006
8C25D910	LW	A1,D910 (AT)	;DL = @8018D910
240600B0	ADDIU	A2,R0,00B0
248403E0	ADDIU	A0,A0,03E0	;8006----: DL.init
00A63821	ADDU	A3,A1,A2
0C01C968	JAL	800725A0	;bcopy(DL.init, p->DL, size)
AC27D910	SW	A3,D910 (AT)
@ 8005F75C	0x6035C
3C0F8010	LUI	T7,8010
91EF609C	LBU	T7,609C (T7)
3C088010	LUI	T0,8010
39F80001	XORI	T8,T7,0001
0018CB00	SLL	T9,T8,0xC	;bank = (@8010609C ^ 1) * 0x1000
25084098	ADDIU	T0,T0,4098
03284021	ADDU	T0,T9,T0	;buffer = 80104098[bank]
@ 8005F778	0x60378
91090000	LBU	T1,0000 (T0)	;T1 = buf(next)
240100FF	ADDIU	AT,R0,00FF
152100B2	BNE	T1,AT,8005FA4C	;return if not an encoded char (all start with 0xFF)
AFA800B8	SW	T0,00B8 (SP)	;SP+B8 = p->buf
@ 8005F788	0x60388	read header off buffer
8FAA00B8	LW	T2,00B8 (SP)
3C018010	LUI	AT,8010
254C000B	ADDIU	T4,T2,000B
914D0001	LBU	T5,0001 (T2)	;T5 = buf(next)
914E0002	LBU	T6,0002 (T2)
914F0003	LBU	T7,0003 (T2)
91580004	LBU	T8,0004 (T2)
91480005	LBU	T0,0005 (T2)
91490006	LBU	T1,0006 (T2)
89590007	LWL	T9,0007 (T2)
9959000A	LWR	T9,000A (T2)
AFAC00B8	SW	T4,00B8 (SP)	;advance past leader
A3AD00B4	SB	T5,00B4 (SP)	;SP+B4 = xpos; write to address directly
A3AE00B5	SB	T6,00B5 (SP)
A3AF00B2	SB	T7,00B2 (SP)	;SP+B2 = ypos; write to address directly
A3B800B3	SB	T8,00B3 (SP)
87AB00B4	LH	T3,00B4 (SP)
A3A800AF	SB	T0,00AF (SP)	;SP+AF = next(buf): xspacing(?)
A3A900AE	SB	T1,00AE (SP)	;SP+AE = next(buf): yspacing(?)
A7AB00B0	SH	T3,00B0 (SP)	;SP+B0 = SP+B4: initial xpos
@ 8005F7D8	0x603D8	set foreground color
3C018019	LUI	AT,8019
8C2FD910	LW	T7,D910 (AT)
8FAE00B8	LW	T6,00B8 (SP)
25F80008	ADDIU	T8,T7,0008
AC38D910	SW	T8,D910 (AT)
3C0AFA00	LUI	T2,FA00
91D80000	LBU	T8,0000 (T6)	;T8 = next(buf)
ADEA0000	SW	T2,0000 (T7)	;DL.append(0xFA000000)
ADF90004	SW	T9,0004 (T7)	;DL.append(rgba); they could have just used a LWL/R for this...
1300008D	BEQ	T8,R0,8005FA34	;break if end of string
@ 8005F800	0x60400	draw char
8FB900B8	LW	T9,00B8 (SP)
272F0003	ADDIU	T7,T9,0003
AFAF00B8	SW	T7,00B8 (SP)
93290001	LBU	T1,0001 (T9)	;T1 = next(buf): flag
932E0002	LBU	T6,0002 (T9)
312C0040	ANDI	T4,T1,0040
11800011	BEQ	T4,R0,8005F864	;skip if whitespace flag isn't set
312A0080	ANDI	T2,T1,0080
@ 8005F824	0x60424	whitespace
24010009	ADDIU	AT,R0,0009
51C10079	BEQL	T6,AT,8005FA0C	;tab
2408001C	ADDIU	T0,R0,001C	;width = 28
24010020	ADDIU	AT,R0,0020
51C10076	BEQL	T6,AT,8005FA0C	;space
24080007	ADDIU	T0,R0,0007	;width = 7
2401000A	ADDIU	AT,R0,000A
25EBFFFF	ADDIU	T3,T7,FFFF	;silly me, correction  since they don't read uncaught whitespace
55C10078	BNEL	T6,AT,8005FA24	;continue if not newline
AFAB00B8	SW	T3,00B8 (SP)
@ 8005F84C	0x6044C	newline
87AB00B0	LH	T3,00B0 (SP)
87AE00B2	LH	T6,00B2 (SP)
A7AB00B4	SH	T3,00B4 (SP)	;xpos = initial xpos
25D9000E	ADDIU	T9,T6,000E
10000072	BEQ	R0,R0,8005FA24
A7B900B2	SH	T9,00B2 (SP)	;ypos += 14
@ 8005F864	0x60464	other chars; T2 is flag & 0x80 from before
3C018019	LUI	AT,8019
8C39D910	LW	T9,D910 (AT)
27380008	ADDIU	T8,T9,0008
AC38D910	SW	T8,D910 (AT)
3C0CFD48	LUI	T4,FD48
358C000F	ORI	T4,T4,000F
AF2C0000	SW	T4,0000 (T9)	;DL.append(0xFD48000F)
3C018010	LUI	AT,8010
15400016	BNE	T2,R0,8005F8DC	;branch if 1-byte char
A4204092	SH	R0,4092 (AT)
@ 8005F888	0x60488	wchar code; note position isn't advanced, so first byte is the "flag" byte from before
312B0020	ANDI	T3,T1,0020
51600009	BEQL	T3,R0,8005F8B4	;fullwidth if not set
2408000E	ADDIU	T0,R0,000E
3C088006	LUI	T0,8006
000E7840	SLL	T7,T6,0x1
010F7821	ADDU	T7,T0,T7
95F80324	LHU	T8,0324 (T7)	;spacing and offsets from table @ 80060324
91E90268	LBU	T1,0268 (T7)	;encodings table at 80060268
91EE0269	LBU	T6,0269 (T7)
A4384092	SH	T8,4092 (AT)
00184302	SRL	T0,T8,0xC
@ 8005F8B4	0x604B4	fullwidth
A3A800B7	SB	T0,00B7 (SP)
A3A900BE	SB	T1,00BE (SP)	;SP+BE = index
A3AE00BF	SB	T6,00BF (SP)
3C0F801B	LUI	T7,801B
87AB00BE	LH	T3,00BE (SP)
25EF7340	ADDIU	T7,T7,7340	;801B7340: p->wchar image source
000B7200	SLL	T6,T3,0x8
01CF4821	ADDU	T1,T6,T7	;T1=801B7340 + index*0x100: offset to char in source
10000008	BEQ	R0,R0,8005F8F8
AF290004	SW	T1,0004 (T9)	;DL.append(p->image)
@ 8005F8DC	0x604DC	char code
3C0F801E	LUI	T7,801E
24080007	ADDIU	T0,R0,0007
25EFC340	ADDIU	T7,T7,C340	;801DC340: p->char image source
000E5A00	SLL	T3,T6,0x8
016F4821	ADDU	T1,T3,T7	;T9=801EC340 + index*0x100: offset to char in source
A3A800B7	SB	T0,00B7 (SP)	;SP+B7 = 7
AF290004	SW	T1,0004 (T9)	;DL.append(p->image)
@ 8005F8F8	0x604F8	settile
3C018019	LUI	AT,8019
3C048006	LUI	A0,8006
8C25D910	LW	A1,D910 (AT)	;DL = @8018D910
24060030	ADDIU	A2,R0,0030
24840490	ADDIU	A0,A0,0490	;8006----: DL.chartile
00A63821	ADDU	A3,A1,A2
0C01C968	JAL	800725A0	;bcopy(DL.chartile, p->DL, size)
AC27D910	SW	A3,D910 (AT)
@ 8005F918	0x60518	this could be minimized a bit more
3C018010	LUI	AT,8010
93AB00AF	LBU	T3,00AF (SP)	;T3 = SP+AF: xspacing(?)
902C4092	LBU	T4,4092 (AT)
2419000E	ADDIU	T9,R0,000E
256E001F	ADDIU	T6,T3,001F
318C000F	ANDI	T4,T4,000F
87AD00B4	LH	T5,00B4 (SP)	;T5 = SP+B4: xpos
01AC6823	SUBU	T5,T5,T4
01D94804	SLLV	T1,T9,T6
A7AD00B4	SH	T5,00B4 (SP)	;update xpos with left offset
93AB00AE	LBU	T3,00AE (SP)	;T9 = SP+AE: yspacing(?)
01A94021	ADDU	T0,T5,T1	;T0 = xpos + 14<<(0x1F+xspacing)
87AD00B2	LH	T5,00B2 (SP)	;T3 = SP+B2: ypos
0008C080	SLL	T8,T0,0x2
802A4093	LB	T2,4093 (AT)
01AA6821	ADDU	T5,T5,T2
A42D4090	SH	T5,4090 (AT)	;80104090 = corrected y
256E001F	ADDIU	T6,T3,001F
01D94804	SLLV	T1,T9,T6
330A0FFF	ANDI	T2,T8,0FFF	;T2 = 4*width & 0xFFF: ulx
3C01E400	LUI	AT,E400
000A7B00	SLL	T7,T2,0xC
01A94021	ADDU	T0,T5,T1	;T0 = ypos + 14<<(0x1F+yspacing)
0008C080	SLL	T8,T0,0x2
01E16025	OR	T4,T7,AT
3C018019	LUI	AT,8019
8C39D910	LW	T9,D910 (AT)
272D0018	ADDIU	T5,T9,0018
AC2DD910	SW	T5,D910 (AT)
330A0FFF	ANDI	T2,T8,0FFF	;T2 = 4*height & 0xFFF: uly
018A7825	OR	T7,T4,T2	;texrect | ulx | uly
AF2F0000	SW	T7,0000 (T9)	;DL.append(texrect.1.upper)
3C018010	LUI	AT,8010
87AD00B4	LH	T5,00B4 (SP)	;T5 = SP+B4: xpos
84284090	LH	T0,4090 (AT)	;T0 = SP+B2: ypos
000D7080	SLL	T6,T5,0x2
31CB0FFF	ANDI	T3,T6,0FFF	;T3 = 4*xpos & 0xFFF: lrx
0008C080	SLL	T8,T0,0x2
330C0FFF	ANDI	T4,T8,0FFF	;T4 = 4*ypos & 0xFFF: lry
000B4B00	SLL	T1,T3,0xC
012C5025	OR	T2,T1,T4	;lrx | lry
AF2A0004	SW	T2,0004 (T9)	;DL.append(texrect.1.lower)
3C0EB400	LUI	T6,B400
AF20000C	SW	R0,000C (T9)	;DL.append(texrect.2.upper = 0)
3C0CB300	LUI	T4,B300
AF2E0008	SW	T6,0008 (T9)	;DL.append(0xB4000000)
93AF00AF	LBU	T7,00AF (SP)	;T7 = xspacing
AF2C0010	SW	T4,0010 (T9)	;DL.append(0xB3000000)
2418000B	ADDIU	T8,R0,000B
240E0001	ADDIU	T6,R0,0001
030F6823	SUBU	T5,T8,T7
93A900AE	LBU	T1,00AE (SP)	;T1=yspacing
01AE5804	SLLV	T3,T6,T5	;T3 = 1 << (11 - xspacing)
03095023	SUBU	T2,T8,T1
3168FFFF	ANDI	T0,T3,FFFF	;T0 = change in x/s
014E7804	SLLV	T7,T6,T2	;T7 = 1 << (11 - yspacing)
0008C400	SLL	T8,T0,0x10
31EEFFFF	ANDI	T6,T7,FFFF	;T6 = change in y/t
030E6825	OR	T5,T8,T6
AF2D0014	SW	T5,0014 (T9)	;DL.append(texrect.2.lower = 0)
@ 8005FA08	0x60608
93A800B7	LBU	T0,00B7 (SP)
@ 8005FA0C	0x6060C	push spacing
93AD00AF	LBU	T5,00AF (SP)
87AE00B4	LH	T6,00B4 (SP)
25AB001F	ADDIU	T3,T5,001F
01684804	SLLV	T1,T0,T3
01C95021	ADDU	T2,T6,T1
A7AA00B4	SH	T2,00B4 (SP)	;xpos += 7 << (0x1F + xspacing)
@ 8005FA24	0x60624	test if at end of string
8FB900B8	LW	T9,00B8 (SP)
932C0000	LBU	T4,0000 (T9)
1580FF74	BNE	T4,R0,8005F800
00000000	NOP
@ 8005FA34	0x60634	test if more commands
27380001	ADDIU	T8,T9,0001
AFB800B8	SW	T8,00B8 (SP)
240100FF	ADDIU	AT,R0,00FF
93080000	LBU	T0,0000 (T8)	;T0 = next(buf)
1101FF50	BEQ	T0,AT,8005F788	;return if not an encoded char (all start with 0xFF)
00000000	NOP
@ 8005FA4C	0x6064C	return
8FBF00A8	LW	RA,00A8 (SP)
03E00008	JR	RA
27BD00C0	ADDIU	SP,SP,00C0

@80060268	0x60E68	Encodings (21-7E); made it two bytes for future expansion, etc.
00EB 00E2 0240 00EE 00EE 00EE 0241 00E5 00E6 00F1 00EF 0243 00F0 00E8 00ED 0000 
0001 0002 0003 0004 0005 0006 0007 0008 0009 00E7 00EE 00EE 00F3 00EE 00F4 0245 
00AC 00AD 00AE 00AF 00B0 00B1 00B2 00B3 00B4 00B5 00B6 00B7 00B8 00B9 00BA 00BB 
00BC 00BD 00BE 00BF 00C0 00C1 00C2 00C3 00C4 00C5 00E3 00F2 00E4 00EE 00EC 00EE 
00C6 00C7 00C8 00C9 00CA 00CB 00CC 00CD 00CE 00CF 00D0 00D1 00D2 00D3 00D4 00D5 
00D6 00D7 00D8 00D9 00DA 00DB 00DC 00DD 00DE 00DF 00F5 00F6 00F7 00E1

@80060324	0x60F24	Spacings; positive y values push tiles down (values added to ypos)
E100 B200 E000 E000 E000 E000 7000 E800 7000 D000 D000 D102 E000 A404 E000 D000 
A300 D000 D000 D000 D000 D000 D000 D000 D000 A400 E000 E000 E000 E000 E100 E000 
E000 E000 E000 E000 E000 E000 E000 D000 A300 D100 D000 E100 E000 E000 E000 E000 
E000 E000 D100 E000 D000 E000 E000 E000 E000 E000 E600 E000 9000 E000 E000 E000 
D100 B100 C100 B100 C100 B200 C203 D200 9400 B201 C200 8300 E000 D100 C100 C203 
C103 B100 C200 B100 C100 D000 E000 C100 C203 D200 9400 B200 E000 E000

@800603E0	0x60FE0	init
E7000000 00000000
BA001402 00000000
FC119623 FF2FFFFF
BA000C02 00000000
BA000903 00000C00
BA001102 00000000
BA001001 00000000
BA000801 00000000
B9000002 00000000
BA000E02 00000000
BA000402 00000000
B900031D 00504240
F9000000 00000000
BA001301 00000000
BA000E02 00008000
FD100000 801B7140
E8000000 00000000
F5000100 07000000
E6000000 00000000
F0000000 073FC000
E7000000 00000000
BB000001 80008000

@80060490	0x61090	chartile
F5480400 07000000
E6000000 00000000
F4000000 07034034
E7000000 00000000
F5480400 00000000
F2000000 00034034

+_+

0x718F0	initialize A1 bytes of unaligned data A0
	accepts: A0=p->data, A1=size
0x71990

0x71D40	...EPI DMA with boot device
0x71E20	...EPI entry management
0x72050	...64DD thread for something-of-another
0x724E0

800725A0	0x731A0	bcopy: copy A2 bytes from A0 to A1
800728B0	0x734B0

